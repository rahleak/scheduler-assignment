{"ast":null,"code":"import _objectSpread from \"/Users/rahwaleakemariam/scheduler/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/rahwaleakemariam/scheduler/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport axios from \"axios\";\nexport function useApplicationData(params) {\n  const _useState = useState({\n    day: \"Monday\",\n    days: [],\n    appointments: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  const setDay = day => {\n    setState(state => _objectSpread({}, state, {\n      day\n    }));\n  };\n\n  function bookInterview(id, interview) {\n    const appointment = _objectSpread({}, state.appointments[id], {\n      interview: _objectSpread({}, interview)\n    });\n\n    const appointments = _objectSpread({}, state.appointments, {\n      [id]: appointment\n    });\n\n    setState(_objectSpread({}, state, {\n      appointments: appointments\n    }));\n\n    if (interview) {\n      return axios.put(\"http://localhost:8001/api/appointments/\".concat(id), {\n        interview\n      }).then(res => {\n        console.log(res);\n        setState(_objectSpread({}, state, {\n          appointments: appointments\n        }));\n      });\n    }\n  }\n\n  function cancelInterview(id) {\n    setState(_objectSpread({}, state, {\n      [id]: _objectSpread({}, state.appointments[id], {\n        interview: null\n      })\n    }));\n\n    if (id) {\n      return axios.delete(\"http://localhost:8001/api/appointments/\".concat(id)).then(res => {\n        console.log(res);\n        setState(_objectSpread({}, state, {\n          interview: null\n        }));\n      });\n    }\n  }\n\n  function updateSpots(state, appointments, id) {\n    // setState()\n    //GET DAY OBJECT\n    const dayObj = state.days; //  ITERATE  APPOINTMENT ID\n    // COUNT THE NULL = AVAILABLE SPOT\n    // 5 - (TRUTHY APPOINTMENT IDS) = AVAILABLE SPOTS\n    // CHANGES WHEN BOOKINTERVIEW/CANCEL INTERVIEW IS CALLED (SUCCESSFUL)\n    //return days array\n\n    return [state.days];\n  }\n\n  useEffect(() => {\n    Promise.all([axios.get(\"/api/days\"), axios.get(\"/api/appointments\"), axios.get(\"/api/interviewers\")]).then(all => {\n      const _all = _slicedToArray(all, 3),\n            days = _all[0],\n            appointments = _all[1],\n            interviewers = _all[2];\n\n      setState(prev => _objectSpread({}, prev, {\n        days: days.data,\n        appointments: appointments.data,\n        interviewers: interviewers.data\n      }));\n    });\n  }, [state.day]);\n  return {\n    state,\n    setDay,\n    bookInterview,\n    cancelInterview\n  };\n}","map":{"version":3,"sources":["/Users/rahwaleakemariam/scheduler/src/hooks/useApplicationData.js"],"names":["useState","useEffect","axios","useApplicationData","params","day","days","appointments","state","setState","setDay","bookInterview","id","interview","appointment","put","then","res","console","log","cancelInterview","delete","updateSpots","dayObj","Promise","all","get","interviewers","prev","data"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from \"axios\";\n\nexport function useApplicationData(params) {\n  const [state, setState] = useState({\n    day: \"Monday\",\n    days: [],\n    appointments: []\n  });\n\n  const setDay = (day) => {\n    setState(state => ({ ...state, day }));\n  }\n\n  function bookInterview(id, interview) {\n    const appointment = {\n      ...state.appointments[id],\n      interview: { ...interview }\n    };\n    const appointments = {\n      ...state.appointments,\n      [id]: appointment\n    };\n    setState({\n      ...state,\n      appointments: appointments\n    });\n    if (interview) {\n      return (axios\n        .put(`http://localhost:8001/api/appointments/${id}`, {\n        interview\n      })\n        .then((res) => {\n          console.log(res);\n          setState({\n            ...state,\n            appointments: appointments\n          })\n        }\n        )\n        \n      )\n    }\n  }\n\n  function cancelInterview(id) {\n    \n    setState({\n      ...state,\n      [id]: {\n        ...state.appointments[id],\n        interview: null\n      }\n    })\n    if (id) {\n      return axios\n        .delete(`http://localhost:8001/api/appointments/${id}`)\n        .then((res) => {\n          console.log(res);\n          setState({\n            ...state,\n            interview: null\n          })\n        })\n        \n      }\n    }\n\n    function updateSpots(state, appointments, id) {\n      // setState()\n\n      //GET DAY OBJECT\n      const dayObj = state.days\n      //  ITERATE  APPOINTMENT ID\n\n      // COUNT THE NULL = AVAILABLE SPOT\n\n      // 5 - (TRUTHY APPOINTMENT IDS) = AVAILABLE SPOTS\n      // CHANGES WHEN BOOKINTERVIEW/CANCEL INTERVIEW IS CALLED (SUCCESSFUL)\n\n      //return days array\n      return [state.days];\n    }\n\n    useEffect(() => {\n\n      Promise.all([\n        axios.get(\"/api/days\"),\n        axios.get(\"/api/appointments\"),\n        axios.get(\"/api/interviewers\")\n      ]).then((all) => {\n        const [days, appointments, interviewers] = all;\n        setState(prev => ({ ...prev, days: days.data, appointments: appointments.data, interviewers: interviewers.data }));\n  \n  \n      })\n    }, [state.day])\n\n    return { state, setDay, bookInterview, cancelInterview }\n}"]},"metadata":{},"sourceType":"module"}